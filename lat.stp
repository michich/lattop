%{
#include <linux/stacktrace.h>
#include <linux/latencytop.h>

#ifndef LT_BACKTRACEDEPTH
#define LT_BACKTRACEDEPTH	12
#endif

%}

%( $# != 3 %? **ERROR** %)
global min_delay = $1
global max_interruptible_delay = $2
global pid_filter = $3

function task_stack_trace:string(tsk:long) %{
	struct stack_trace trace;
	unsigned long backtrace[LT_BACKTRACEDEPTH];
	char *p = STAP_RETVALUE;
	int i;
	bool first = true;

	BUILD_BUG_ON(MAXSTRINGLEN < LT_BACKTRACEDEPTH * (2 + 8*2 + 1));

        memset(&trace, 0, sizeof(trace));
        trace.max_entries = LT_BACKTRACEDEPTH;
        trace.entries = backtrace;
        save_stack_trace_tsk((struct task_struct*)STAP_ARG_tsk, &trace);

	for (i = 0; i < LT_BACKTRACEDEPTH; i++) {
		unsigned long record = backtrace[i];
		if (record == 0 || record == ULONG_MAX)
			goto finish;

		if (!first)
			*p++ = ' ';

		sprintf(p, "0x%08lx", record);
		p += 2 + 8*2;
		first = false;
	}
finish:
	*p = '\0';
%}

probe kernel.trace("sched_stat_sleep") {
	/* Long interruptible waits are generally user-requested */
	/* Negative sleeps are time going backwards */
	/* Zero-time sleeps are non-interesting */
	pid = task_pid($tsk);
	if ((pid_filter == 0 || pid_filter == pid) &&
	    $delay > min_delay && $delay <= max_interruptible_delay) {
		printf("S %lu %lu %lu %s\n%s\n",
		       $delay, pid, task_tid($tsk), task_execname($tsk),
		       task_stack_trace($tsk));
	}
}

probe kernel.trace("sched_stat_blocked") {
	/* Negative sleeps are time going backwards */
	/* Zero-time sleeps are non-interesting */
	pid = task_pid($tsk);
	if ((pid_filter == 0 || pid_filter == pid) &&
	    $delay > min_delay) {
		printf("B %lu %lu %lu %s\n%s\n",
		       $delay, pid, task_tid($tsk), task_execname($tsk),
		       task_stack_trace($tsk));
	}
}

probe begin {
	printf("lat begin\n");
}
